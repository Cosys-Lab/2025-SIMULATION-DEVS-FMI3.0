"""
2025-SIMULATION-DEVS-FMI3.0
Copyright (C) 2025 Cosys-lab, University of Antwerp

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""

import pickle
import base64

from {{ model_module }} import {{ model_name }}
from devs_wrapper import DEVSWrapper
from pypdevs.infinity import INFINITY


class Model:
    def __init__(
            self,
            instance_name,
            instantiation_token,
            resource_path,
            visible,
            logging_on,
            event_mode_used,
            early_return_allowed,
            required_intermediate_variables,
    ) -> None:
        self.instance_name = instance_name
        self.instantiation_token = instantiation_token
        self.resource_path = resource_path
        self.visible = visible
        self.logging_on = logging_on
        self.event_mode_used = event_mode_used
        self.early_return_allowed = early_return_allowed
        self.required_intermediate_variables = required_intermediate_variables

        self.DEVS_wrapper = DEVSWrapper({{ model_name }}({{ init_args }}))
        self.state = str(self.DEVS_wrapper.get_state())

        self.time = 0.0
        self.ta = False

        # Dynamically added attributes
        {{ attributes }}

        self.reference_to_attribute = {{ reference_to_attribute }}

        self.in_port_to_attributes = { {% for key, value in in_port_to_attributes.items() %}
            {{ key }}: {{ value }}, {% endfor %}
        }

        self.out_port_to_attributes = { {% for key, value in out_port_to_attributes.items() %}
            {{ key }}: {{ value }}, {% endfor %}
        }

        self.clock_intervals = {
            "ta": INFINITY,
        }

        self.clock_interval_qualifiers = {
            "ta": FMI3IntervalQualifier.intervalNotYetKnown,
        }

        self.fmuState = FMUState.instantiated

    # ================= FMI3 =================

    def fmi3DoStep(
            self,
            current_communication_point: float,
            communication_step_size: float,
            no_set_fmu_state_prior_to_current_point: bool,
    ):
        self.time = current_communication_point + communication_step_size
        self.DEVS_wrapper.increment_elapsed(communication_step_size)

        # TODO: Check if elapsed would be >= time advance and signal early return?
        event_handling_needed = False
        terminate_simulation = False
        early_return = False
        last_successful_time = self.time

        return (
            Fmi3Status.ok,
            event_handling_needed,
            terminate_simulation,
            early_return,
            last_successful_time,
        )

    def fmi3EnterInitializationMode(
            self,
            tolerance_defined: bool,
            tolerance: float,
            start_time: float,
            stop_time_defined: bool,
            stop_time: float
    ):
        if self.fmuState == FMUState.instantiated:
            self.fmuState = FMUState.initialization

            self.clock_intervals["ta"] = self.DEVS_wrapper.timeAdvance()
            self.clock_interval_qualifiers["ta"] = FMI3IntervalQualifier.intervalChanged

            return Fmi3Status.ok
        else:
            return Fmi3Status.error

    def fmi3ExitInitializationMode(self):
        if self.fmuState == FMUState.initialization:
            if self.event_mode_used:
                self.fmuState = FMUState.event
            else:
                self.fmuState = FMUState.step
            return Fmi3Status.ok
        else:
            return Fmi3Status.error

    def fmi3EnterEventMode(self):
        # TODO: Check if event_mode_used is true?
        # TODO: Check if remaining in event mode and returning OK is correct behavior according to the standard
        if self.fmuState == FMUState.step:
            self.fmuState = FMUState.event
            return Fmi3Status.ok
        elif self.fmuState == FMUState.event:
            return Fmi3Status.ok
        else:
            return Fmi3Status.error

    def fmi3EnterStepMode(self):
        if self.fmuState == FMUState.event:
            # Disable all clocks
            self.activate_out = False
            self.activate_in = False
            self.finish_out = False
            self.finish_in = False
            self.fmuState = FMUState.step
            return Fmi3Status.ok
        # TODO: Check if remaining in step mode and returning OK is correct behavior according to the standard
        elif self.fmuState == FMUState.step:
            return Fmi3Status.ok
        else:
            return Fmi3Status.error

    def fmi3Terminate(self):
        return Fmi3Status.ok

    def fmi3Reset(self):
        return Fmi3Status.ok

    def fmi3SerializeFmuState(self):
        return Fmi3Status.error

    def fmi3DeserializeFmuState(self, bytes: bytes):
        return Fmi3Status.error

    def fmi3GetFloat32(self, value_references):
        return self._get_value(value_references)

    def fmi3GetFloat64(self, value_references):
        return self._get_value(value_references)

    def fmi3GetInt8(self, value_references):
        return self._get_value(value_references)

    def fmi3GetUInt8(self, value_references):
        return self._get_value(value_references)

    def fmi3GetInt16(self, value_references):
        return self._get_value(value_references)

    def fmi3GetUInt16(self, value_references):
        return self._get_value(value_references)

    def fmi3GetInt32(self, value_references):
        return self._get_value(value_references)

    def fmi3GetUInt32(self, value_references):
        return self._get_value(value_references)

    def fmi3GetInt64(self, value_references):
        return self._get_value(value_references)

    def fmi3GetUInt64(self, value_references):
        return self._get_value(value_references)

    def fmi3GetBoolean(self, value_references):
        return self._get_value(value_references)

    def fmi3GetString(self, value_references):
        return self._get_value(value_references)

    def fmi3GetBinary(self, value_references):
        return self._get_value(value_references)

    def fmi3GetClock(self, value_references):
        if self.fmuState == FMUState.event:
            values = []
            for r in value_references:
                # TODO: Add error handling (ref is not clock, clock not linked to port, ...)
                attribute = self.reference_to_attribute[r]
                ticking = getattr(self, attribute)
                if ticking:
                    values.append(True)
                    # "For an output Clock only the first call of fmi3GetClock for a specific activation of this Clock
                    # signals fmi3ClockActive. The FMU sets the reported activation state immediately back to
                    # fmi3ClockInactive for following fmi3GetClock calls for that Clock until this output Clock is
                    # activated again." - FMI docs 3.0 - 5.2.2. State: Clock Update Mode
                    setattr(self, attribute, False)
                else:
                    values.append(False)
            return Fmi3Status.ok, values
        else:
            return Fmi3Status.error, []

    def fmi3GetIntervalDecimal(self, value_references):
        intervals = []
        qualifiers = []

        for r in value_references:
            # TODO: Add error handling (ref not clock, ...)
            # TODO: Add logic for changing interval qualifiers
            intervals.append(self.clock_intervals[self.reference_to_attribute[r]])
            qualifiers.append(self.clock_interval_qualifiers[self.reference_to_attribute[r]])

        return Fmi3Status.ok, intervals, qualifiers

    def fmi3SetFloat32(self, value_references, values):
        return self._set_value(value_references, values)

    def fmi3SetFloat64(self, value_references, values):
        return self._set_value(value_references, values)

    def fmi3SetInt8(self, value_references, values):
        return self._set_value(value_references, values)

    def fmi3SetUInt8(self, value_references, values):
        return self._set_value(value_references, values)

    def fmi3SetInt16(self, value_references, values):
        return self._set_value(value_references, values)

    def fmi3SetUInt16(self, value_references, values):
        return self._set_value(value_references, values)

    def fmi3SetInt32(self, value_references, values):
        return self._set_value(value_references, values)

    def fmi3SetUInt32(self, value_references, values):
        return self._set_value(value_references, values)

    def fmi3SetInt64(self, value_references, values):
        return self._set_value(value_references, values)

    def fmi3SetUInt64(self, value_references, values):
        return self._set_value(value_references, values)

    def fmi3SetBoolean(self, value_references, values):
        return self._set_value(value_references, values)

    def fmi3SetString(self, value_references, values):
        return self._set_value(value_references, values)

    def fmi3SetBinary(self, value_references, values):
        return self._set_value(value_references, values)

    def fmi3SetClock(self, value_references, values):
        if self.fmuState == FMUState.event:
            for r, v in zip(value_references, values):
                if self.reference_to_attribute[r] == "ta" and v:
                    # TODO: Check if ta(s) == elapsed?
                    self.output_events = self.DEVS_wrapper.outputFnc()

                    for port in self.output_events:
                        if port in self.out_port_to_attributes:
                            (clock, data) = self.out_port_to_attributes[port]
                            setattr(self, clock, True)
                            setattr(self, data, base64.b64encode(pickle.dumps(self.output_events[port])).decode('ascii'))
                            #setattr(self, data, self.output_events[port][0])
                else:
                    setattr(self, self.reference_to_attribute[r], v)

            return Fmi3Status.ok
        else:
            return Fmi3Status.error

    def fmi3UpdateDiscreteStates(self):
        ta = None

        inputs = {}
        for port in self.DEVS_wrapper.model.IPorts:
            if port in self.in_port_to_attributes:
                (clock, data) = self.in_port_to_attributes[port]
                if getattr(self, clock):
                    events = pickle.loads(base64.b64decode(getattr(self, data).encode('ascii')))
                    #events = getattr(self, data)
                    inputs[port] = events

        transitioned = self.DEVS_wrapper.transition(inputs, self.time)

        if transitioned:
            ta = self.DEVS_wrapper.timeAdvance()
            self.clock_intervals["ta"] = ta
            self.clock_interval_qualifiers["ta"] = FMI3IntervalQualifier.intervalChanged
            self.state = str(self.DEVS_wrapper.get_state())
            # Clear inputs
            for port in self.DEVS_wrapper.model.IPorts:
                if port in self.in_port_to_attributes:
                    (clock, data) = self.in_port_to_attributes[port]
                    setattr(self, clock, False)
                    setattr(self, data, "")

        status = Fmi3Status.ok
        discrete_states_need_update = False
        terminate_simulation = False
        nominals_continuous_states_changed = False
        values_continuous_states_changed = False
        next_event_time_defined = (ta is not None and ta != INFINITY)
        next_event_time = self.time + ta if next_event_time_defined else 0.0
        return (status, discrete_states_need_update, terminate_simulation, nominals_continuous_states_changed,
                values_continuous_states_changed, next_event_time_defined, next_event_time)

    # ================= Helpers =================

    def _set_value(self, references, values):

        for r, v in zip(references, values):
            setattr(self, self.reference_to_attribute[r], v)

        return Fmi3Status.ok

    def _get_value(self, references):

        values = []

        for r in references:
            values.append(getattr(self, self.reference_to_attribute[r]))

        return Fmi3Status.ok, values

    def _update_outputs(self):
        return

    def _update_clocks(self):
        return


class Fmi3Status:
    """
    Represents the status of an FMI3 FMU or the results of function calls.

    Values:
        * ok: all well
        * warning: an issue has arisen, but the computation can continue.
        * discard: an operation has resulted in invalid output, which must be discarded
        * error: an error has ocurred for this specific FMU instance.
        * fatal: a fatal error has ocurred which has corrupted ALL FMU instances.
    """

    ok = 0
    warning = 1
    discard = 2
    error = 3
    fatal = 4


class FMUState:
    instantiated = 0
    configuration = 1
    initialization = 2
    step = 3
    intermediateUpdate = 4
    event = 5
    reconfiguration = 6
    terminated = 7


class FMI3IntervalQualifier:
    intervalNotYetKnown = 0
    intervalUnchanged = 1
    intervalChanged = 2


if __name__ == "__main__":
    m = Model()

