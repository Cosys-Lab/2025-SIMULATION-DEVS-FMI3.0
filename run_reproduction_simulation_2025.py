"""
2025-SIMULATION-DEVS-FMI3.0
Copyright (C) 2025 Cosys-lab, University of Antwerp

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""

from acc_models_instrumented import AdaptiveCruiseControlSystem
from coupled_devs_simulation_pypdevs import run_pypdevs_simulation_and_plot
from coupled_devs_simulation_fmi import run_fmi_simulation_and_plot
from devs_fmu_exporter import export_coupled_model
from gather_logs import gather_logs
from compare_log_dirs import compare_log_dirs
from compare_traces import compare_traces


def main():        
    # Simulate ACC system using PythonPDEVS (ground truth)
    # This will generate:
    # Atomic model .xml logs in .\logs
    # PythonPDEVS .xml trace in .\traces
    # Plots of functional behavior in .\traces\plots
    # Functional behavior traces (.hdf5) in .\traces\hdf5
    run_pypdevs_simulation_and_plot()

    # Gather atomic model logs for later comparison
    # This will collect the logs generated by the PythonPDEVS simulation (.\logs)
    # and copy them to .\logs_comparison\acc_system_pypdevs
    gather_logs('.\\logs', '.\\logs_comparison\\acc_system_pypdevs')

    # Instantiate ACC system model
    acc_system = AdaptiveCruiseControlSystem(name="acc_system")
    # Export ACC system model to FMI co-simulation package
    # This will generate:
    # Co-simulation package in .\generated
    export_coupled_model(acc_system, output_dir='.\\generated\\acc_system')

    # Simulate ACC system using FMI (our approach)
    # This will use the previously generated co-simulation package with the DEVS FMUs
    # This will generate:
    # Atomic model .xml logs in .\generated\acc_system\FMUs\*\resources\logs
    # PythonPDEVS .xml trace in .\traces
    # Plots of functional behavior in .\traces\plots
    # Functional behavior traces (.hdf5) in .\traces\hdf5
    run_fmi_simulation_and_plot()

    # Gather atomic model logs for later comparison
    # This will collect the logs generated by the PythonPDEVS simulation (.\generated\acc_system\FMUs\*\resources\logs)
    # and copy them to .\logs_comparison\acc_system_fmi
    gather_logs('.\\generated\\acc_system', '.\\logs_comparison\\acc_system_fmi')

    # Compare logs of both simulations to ensure they match
    print('\n--- RESULTS ---\nCOMPARING LOGS')
    match = compare_log_dirs('.\\logs_comparison\\acc_system_pypdevs',
                             '.\\logs_comparison\\acc_system_fmi')
    if match:
        print('ALL MATCHING!')
    else:
        print('ERROR: LOGS DON\'T MATCH!')

    # Compare functional traces and calculate errors
    print('\nCOMPARING TRACES')
    compare_traces('.\\traces\\hdf5\\acc_system_pypdevs.h5', '.\\traces\\hdf5\\acc_system_fmi.h5')

if __name__ == "__main__":
    main()
